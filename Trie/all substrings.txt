

#include<bits/stdc++.h>
using namespace std;

struct Node {
  Node * links[2];
 
  bool containsKey(int ind) {
    return (links[ind] != NULL);
  }
  Node * get(int ind) {
    return links[ind];
  }
  void put(int ind, Node * node) {
    links[ind] = node;
  }
};
class Trie {
  private: Node * root;
  public:
    Trie() {
      root = new Node();
    }
 
  public:
    void insert(int num) {
      Node * node = root;
      // cout << num << endl; 
      for (int i = 31; i >= 0; i--) {
        int bit = (num >> i) & 1;
        if (!node -> containsKey(bit)) {
          node -> put(bit, new Node());
        }
        node = node -> get(bit);
      }
    }
  public:
    vector<string> allPossibleStrings(string s) {
      Node * node = root;
      int n = s.length();
	vector<string>ans;
	for (int num = 0; num < (1 << n); num++) {
		string sub = "";
		for (int i = 0; i < n; i++) {
        int bit = num & (1 << i);
        if (node -> containsKey(!bit)) {
          sub+=s[i];
          node = node -> get(!bit);
        } else {
          node = node -> get(bit);
        }
      }
		if (sub.length() > 0) {
			ans.push_back(sub);
		}
	}

	return ans;
    
}
};

int main()
{

	string s="abc";
  int n=s.length();
  Trie trie;
  for (int i = 0; i < (1 << n); i++) {
    trie.insert(i);
  }
  
	vector<string>ans = trie.allPossibleStrings(s);
	//printint all the subsequence.
	cout<<"All possible subsequences are "<<endl;
	for (auto it : ans) {
		cout << it << " ";
	}

}