
bool isValid(vector < vector < char >> & board, int row, int col, char c) {
  for (int i = 0; i < 9; i++) {
    if (board[i][col] == c)
      return false;

    if (board[row][i] == c)
      return false;

    if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
      return false;
  }
  return true;
}

bool solve(vector < vector < char >> & board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board[0].size(); j++) {
      if (board[i][j] == '.') {
        for (char c = '1'; c <= '9'; c++) {
          if (isValid(board, i, j, c)) {
            board[i][j] = c;

            if (solve(board))
              return true;
            else
              board[i][j] = '.';
          }
        }

        return false;
      }
    }
  }
  return true;
}




// my solution

class Solution {
public:
    bool isValid(vector<vector<char>> &board,int row,int col)
    {
      for (int i = 0; i < 9; i++) 
      {
         if (board[i][col] == c)
          return false;

         if (board[row][i] == c)
          return false;

         if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
          return false;
      }
        
      return true;
        
    }
    bool solve(int col,vector < vector < char >> & board)
    {
        if(col == n)
        {
           return true; 
        }
        for(int row=0;row<board.size();row++)
        {
            for(char c='1';c<='9';c++)
            {
                if(board[row][col]='.')
                {
                    if(isValid(board,row,col))
                    {
                        board[row][col]=c;
                        if(solve(col+1,board))
                        {
                            return true;
                        }
                        else
                        {
                            board[row][col]='.';
                        }
                        
                    }
                }
            }
            return false;
        }
        return true;
        
    }
    void solveSudoku(vector<vector<char>>& board) {
        
    }
};