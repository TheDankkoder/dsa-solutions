ListNode* merge(ListNode* A, ListNode* B){

    ListNode* aNode = A;
    ListNode* bNode = B;
    ListNode* merged = NULL;
    ListNode* tail = NULL;
    
    while((aNode!=NULL) && (bNode!=NULL)){
        ListNode* insertedNode = NULL;
        
        if(aNode->val<bNode->val){
            insertedNode = aNode;
            aNode = aNode->next;
        }
        else {
            insertedNode = bNode;
            bNode = bNode->next;
        }
        
        if(merged){
            tail->next = insertedNode;
            tail = insertedNode;
        }
        else {
            merged = tail = insertedNode;
        }
    }
    
    //copy the remainder
    while(aNode!=NULL){
        tail->next = aNode;
        tail = aNode;
        aNode = aNode->next;
    }
    
    while(bNode!=NULL){
        tail->next = bNode;
        tail = bNode;
        bNode = bNode->next;
    }
    
    //Update the last node appropriately
    if(tail){
        tail->next = NULL;
    }
    
    return merged;
}

void mergeSort(ListNode*& A){
    //base condition
    if((A==NULL) || (A->next==NULL)) {
        //empty list or only 1 item left in the list.
        return;
    }
    
    ListNode* mid = A;
    ListNode* fast = A;
    ListNode* prev = NULL;
    
    while(fast!=NULL && fast->next!=NULL){
        prev = mid;
        mid = mid->next;
        fast = fast->next->next;
    }
    
    if(prev){
        prev->next = NULL;
    }
    
    mergeSort(A);
    mergeSort(mid);
    A = merge(A,mid);
}

ListNode* Solution::sortList(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    mergeSort(A);
    return A;
}